openapi: 3.0.0
info:
  title: clevabit API
  description: |
    The clevabit API is organized around the [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer) principle. It features predictable resource-oriented HTTP URLs.

    While all request bodies are expected in JSON encoded request objects, all responses provided
    by the API are encoded as [CBOR](https://www.clevabit.com/developers/#/?id=cbor)
    objects, except stated otherwise.

    The API uses standard HTTP verbs, and response codes.
  version: 1.0.0
servers:
  - description: Sandbox
    url: 'https://sandbox.clevabit.com/api/v1'
  - description: Production (EU)
    url: 'https://api-eu.clevabit.com/api/v1'
paths:
  '/customers/{customerid}':
    get:
      summary: er
      tags: []
      operationId: get-customers-customerid
      responses:
        '200':
          description: OK
          content:
            application/cbor:
              schema:
                $ref: ../models/Customer.v1.yaml
      security:
        - Bearer Token: []
    parameters:
      - schema:
          type: string
          format: uuid
        name: customerid
        in: path
        required: true
        description: "The customer's UUID"
  /auth:
    post:
      summary: auth
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/cbor:
              schema:
                $ref: ../models/Authorization.v1.yaml
      operationId: post-auth
      requestBody:
        description: |
          | Form Field | Value | Required |
          | :---  | :--- | :--- |
          | email | The account's email address | true |
          | password | The account's password | true |
          | shortname | The customer's shortname | true |
          | csrftoken | The CSRF Token generated and sent by the login form | false |
          | referrer | The URL to redirect to after an successful login | false |
        content:
          application/x-www-form-urlencoded:
            schema: {}
      parameters:
        - schema:
            type: string
          in: header
          name: x-app-id
          description: 'The application id is a UUID, which is provided as a string according to [REF 4122 Section 3](https://tools.ietf.org/html/rfc4122#section-3) in 5 groups separated by hyphens, in the form of 8-4-4-4-12, with characters being lower case.'
        - schema:
            type: string
          in: header
          name: x-app-key
          description: 'The application key is a random string, 64 characters long. The value is case sensitive.'
        - schema:
            type: string
          in: header
          name: x-app-cid
          description: 'The customer id is the UUID of customer to login with. The UUID is encoded according to the RFC 4122, same as x-app-id.'
      description: |
        The Authorization endpoint is used to execute an actual login. A set of
        username/email and password (credentials) is only valid when combined with a customer's
        "shortname", which is provided by request.

        If no _csrftoken_ is provided in the form fields, the _application id (x-app-id)_, _application
        key (x-app-key)_ and _customer id (x-app-cid)_ headers must be set.
components:
  schemas: null
  securitySchemes:
    Bearer Token:
      type: http
      scheme: bearer
      description: "API calls to any endpoint other than _/auth/_ require a valid authorization token.\n\nBy default, the authorization request requires a valid CSRF (Cross Site Request Forgery)\ntoken, which is provided by the server and only valid for a single form submission. In\naddition the CSRF token is only valid for limited amount of time.\n\nFor applications that cannot show an HTML login form, or partner systems that use direct\nserver to server communication, the API provides a way to login a third party (user) by\nproviding its unique application id (_x-app-id_) and application key (_x-app-key_), as\nwell as the customer id (_x-app-cid_) it wants to be logged in with.\n\nRequests using the application id and application key to authenticate as a valid\nlogin mechanism, still need to provide a valid username/email address and password.\n\nFor partners reading data for multiple users, a special account with access to multiple\ncustomer accounts may be provided. Otherwise multiple requests (one per customer account)\nare required. \n\nTo request an application id and application key, please contact your clevabit\nrepresentative."
